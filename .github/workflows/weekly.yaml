# Workflow: Weekly ShannonBase Compile & MTR
# Purpose: Builds and tests ShannonBase (MySQL-based project) on x86 and ARM architectures
# Triggers:
#   - Push to tags matching "*v*" (e.g., version tags like v1.0.0)
#   - Weekly schedule at Saturday 6:30 AM Beijing time (UTC+8, equivalent to Friday 10:30 PM UTC)
# Jobs:
#   - lint: Checks code formatting for storage/rapid_engine and ml directories
#   - build_x86: Builds and runs all MTR tests on x86 architecture
#   - build_arm: Builds and runs selected MTR tests on ARM architecture
# Notes:
#   - Uses concurrency to cancel in-progress runs for the same workflow/ref
#   - Includes disk space optimizations to prevent 'No space left on device' errors
#   - Commented-out alternative test commands (collections/default.weekly) for future use with faster runners
#
#    Copyright (c) 2023, 2024, 2025 Shannon Data AI and/or its affiliates.   
name: weekly

on:
  push:
    tags:
      - "*v*"
  schedule:
    - cron: '30 22 * * 5'   # every week at saturday 1 AM(UTC)

concurrency:
  group: weekly
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure clang-format is available
        run: |
          command -v clang-format-14 > /dev/null || (sudo apt-get update && sudo apt-get install -y clang-format-14)
      - name: Format check
        run: |
          git diff -U0 --no-color ${{ github.event.pull_request.base.sha }} HEAD storage/rapid_engine ml | /usr/share/clang/clang-format-14/clang-format-diff.py -p1 | tee /tmp/.clang-format-diff
          [ -s /tmp/.clang-format-diff ] && exit 1 || true

  #x86
  build_x86:
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0    
    - name: Clean old build cache
      run: |
        rm -rf ${{ github.workspace }}/cmake_build
    - name: install_lib
      run: |
        sudo apt install -y libtirpc-dev && sudo apt install -y libboost-all-dev libexpect-perl
    - name: build_shannon_and_install
      run: |
        cd ${{ github.workspace }}
        mkdir cmake_build && cd cmake_build
        sudo mkdir -p /home/shannon-bin && sudo mkdir -p /home/shannon-bin/data
        sudo chown -R $USER:$USER /home/shannon-bin/
        git config --global --add safe.directory ${{ github.workspace }}
        git fetch --tags -f
        cmake ../ \
        -DCMAKE_BUILD_TYPE=Release  \
        -DCMAKE_INSTALL_PREFIX=/home/shannon-bin/ \
        -DMYSQL_DATADIR=/home/shannon-bin/data \
        -DSYSCONFDIR=/home/shannon-bin/ \
        -DMYSQL_UNIX_ADDR=/home/shannon-bin/temp/mysql.sock \
        -DWITH_MYISAM_STORAGE_ENGINE=1 \
        -DWITH_INNOBASE_STORAGE_ENGINE=1 \
        -DMYSQL_TCP_PORT=3306 \
        -DENABLED_LOCAL_INFILE=1 \
        -DWITH_PROTOBUF=bundled \
        -DWITH_UNIT_TESTS=OFF \
        -DWITH_HYPERGRAPH_OPTIMIZER=ON \
        -DCOMPILATION_COMMENT="MySQL Community Server, and Shannon Data AI Alpha V."
        make -j"$(nproc)" && sudo make install
        sudo find /home/shannon-bin/bin -type f -executable -exec strip --strip-unneeded {} \; || true        
    - name: clean_up_shannonbase_build
      run: |
        sudo rm -rf ${{ github.workspace }}/*
        sudo apt-get clean -y
        sudo apt-get autoremove -y --purge
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /var/log/* /var/cache/*
        sudo rm -rf /tmp/* /var/tmp/*
        sudo rm -rf ~/.cache/* ~/.npm/* ~/.gem/*
        sudo rm -rf /home/runner/.cache/* /home/runner/.docker/*
    - name: run_mtr_test
      run: |
        sudo mkdir -p /home/shannon-bin/log
        sudo chown -R $USER:$USER /home/shannon-bin/
        cd /home/shannon-bin/mysql-test/
        sudo chmod -R u+rwx mysql-test-run.pl
        ./mysql-test-run.pl --big-test --mysqld=--user=$USER --mysqld=--default-storage-engine=innodb --nowarnings --force \
        --big-test --nocheck-testcases --retry=3 --parallel=$(nproc)
        # when we have a fast git action runner, we can use the following command to run the test.
        #sudo chmod +x ./collections/default.weekly && chmod +x ./collections/default.weekly.basic
        #./collections/default.weekly.basic
        #./collections/default.weekly
  # ARM
  build_arm:
    needs: lint
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Clean old build cache
        run: |
          rm -rf ${{ github.workspace }}/cmake_build
      - name: Install ARM dependencies
        run: |
          sudo apt install -y libtirpc-dev libboost-all-dev libjson-perl libexpect-perl
      - name: Build and install (ARM)
        run: |
          cd ${{ github.workspace }}
          mkdir cmake_build && cd cmake_build
          sudo mkdir -p /home/shannon-bin && sudo mkdir -p /home/shannon-bin/data
          sudo chown -R $USER:$USER /home/shannon-bin/
          git config --global --add safe.directory ${{ github.workspace }}
          git fetch --tags -f
          cmake ../ \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/home/shannon-bin/ \
          -DMYSQL_DATADIR=/home/shannon-bin/data \
          -DSYSCONFDIR=/home/shannon-bin/ \
          -DMYSQL_UNIX_ADDR=/home/shannon-bin/temp/mysql.sock \
          -DWITH_MYISAM_STORAGE_ENGINE=1 \
          -DWITH_INNOBASE_STORAGE_ENGINE=1 \
          -DMYSQL_TCP_PORT=3306 \
          -DENABLED_LOCAL_INFILE=1 \
          -DWITH_PROTOBUF=bundled \
          -DWITH_UNIT_TESTS=OFF \
          -DWITH_HYPERGRAPH_OPTIMIZER=ON \
          -DCMAKE_C_FLAGS="-march=armv8-a -O2" \
          -DCMAKE_CXX_FLAGS="-march=armv8-a -O2" \
          -DCOMPILATION_COMMENT="MySQL Community Server, and Shannon Data AI Alpha V."
          make -j"$(nproc)" && sudo make install
          sudo find /home/shannon-bin/bin -type f -executable -exec strip --strip-unneeded {} \; || true
      - name: Clean up build
        run: |
          sudo rm -rf ${{ github.workspace }}/*
          sudo apt-get clean -y
          sudo apt-get autoremove -y --purge
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/log/* /var/cache/*
          sudo rm -rf /tmp/* /var/tmp/*
          sudo rm -rf ~/.cache/* ~/.npm/* ~/.gem/*
          sudo rm -rf /home/runner/.cache/* /home/runner/.docker/*
      - name: Run MTR tests (ARM)
        run: |
          sudo mkdir -p /home/shannon-bin/log
          sudo chown -R $USER:$USER /home/shannon-bin/
          cd /home/shannon-bin/mysql-test/
          sudo chmod -R u+rwx mysql-test-run.pl
          ./mysql-test-run.pl --mysqld=--user=$USER --mysqld=--default-storage-engine=innodb --nowarnings --force \
          --big-test --nocheck-testcases --retry=3 --skip-test-list=skip-tests.arm --parallel=$(nproc)
          # when we have a fast git action runner, we can use the following command to run the test.
          #sudo chmod +x ./collections/default.weekly && chmod +x ./collections/default.weekly.basic
          #./collections/default.weekly.basic
          #./collections/default.weekly
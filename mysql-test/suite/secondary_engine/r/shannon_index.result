create database sh_index;
use sh_index;
#connection_1, cconnection_2
[conn1]
SET USE_SECONDARY_ENGINE=FORCED;
CREATE TABLE employees (
id INT,
name VARCHAR(100),
department VARCHAR(100),
salary DECIMAL(10,2)
) SECONDARY_ENGINE=RAPID;
INSERT INTO employees (id, name, department, salary) VALUES
(1001, 'Alice', 'HR', 6000.00),
(1002, 'Bob', 'Engineering', 8000.00),
(1003, 'Charlie', 'Sales', 7000.00),
(1004, 'David', 'Engineering', 9000.00),
(1005, 'Eve', 'HR', 6500.00);
ALTER TABLE employees SECONDARY_LOAD;
EXPLAIN SELECT * FROM employees;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ALL	NULL	NULL	NULL	NULL	5	100.00	Using secondary engine Rapid
SELECT * FROM employees;
id	name	department	salary
1001	Alice	HR	6000.00
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE id = 1002;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ALL	NULL	NULL	NULL	NULL	5	20.00	Using where; Using secondary engine Rapid
SELECT * FROM employees WHERE id = 1002;
id	name	department	salary
1002	Bob	Engineering	8000.00
EXPLAIN SELECT * FROM employees WHERE name ='Charlie';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ALL	NULL	NULL	NULL	NULL	5	20.00	Using where; Using secondary engine Rapid
SELECT * FROM employees WHERE name ='Charlie';
id	name	department	salary
1003	Charlie	Sales	7000.00
DROP TABLE employees;
CREATE TABLE employees (
id INT PRIMARY KEY,
name VARCHAR(100),
department VARCHAR(100),
salary DECIMAL(10,2),
INDEX idx_name (name),
INDEX idx_dep (department),
INDEX idx_salary(salary)
) SECONDARY_ENGINE=RAPID;
ALTER TABLE employees SECONDARY_LOAD;
INSERT INTO employees (id, name, department, salary) VALUES
(1001, 'Alice', 'HR', 6000.00),
(1002, 'Bob', 'Engineering', 8000.00),
(1003, 'Charlie', 'Sales', 7000.00),
(1004, 'David', 'Engineering', 9000.00),
(1005, 'Eve', 'HR', 6500.00);
EXPLAIN SELECT * FROM employees order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ALL	NULL	NULL	NULL	NULL	5	100.00	Using filesort; Using secondary engine Rapid
SELECT * FROM employees order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE id = 1002;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	Using secondary engine Rapid
SELECT * FROM employees WHERE id = 1002;
id	name	department	salary
1002	Bob	Engineering	8000.00
SELECT * FROM employees WHERE id = 1001;
id	name	department	salary
1001	Alice	HR	6000.00
SELECT * FROM employees WHERE id = 1005;
id	name	department	salary
1005	Eve	HR	6500.00
SELECT * FROM employees WHERE id = 1007;
id	name	department	salary
EXPLAIN SELECT * FROM employees WHERE id <= 1005 and id > 1002 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	PRIMARY	PRIMARY	4	NULL	3	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE id <= 1005 and id > 1002 order by id;
id	name	department	salary
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
SELECT * FROM employees WHERE id <= 1005 and id >= 1002 order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
SELECT * FROM employees WHERE id < 1005 and id >= 1002 order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
SELECT * FROM employees WHERE id < 1005 and id > 1002 order by id;
id	name	department	salary
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
EXPLAIN SELECT * FROM employees WHERE id <= 1005 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	PRIMARY	PRIMARY	4	NULL	5	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE id <= 10005 order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE id < 1005 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	PRIMARY	PRIMARY	4	NULL	4	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE id < 1005 order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
EXPLAIN SELECT * FROM employees WHERE id > 1002 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	PRIMARY	PRIMARY	4	NULL	3	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE id > 1002 order by id;
id	name	department	salary
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE id >= 1002 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	PRIMARY	PRIMARY	4	NULL	4	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE id >= 1002 order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE name ='Bob';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ref	idx_name	idx_name	403	const	1	100.00	Using secondary engine Rapid
SELECT * FROM employees WHERE name ='Bob';
id	name	department	salary
1002	Bob	Engineering	8000.00
SELECT * FROM employees WHERE name ='BobB';
id	name	department	salary
EXPLAIN SELECT * FROM employees WHERE department ='Engineering' order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ref	idx_dep	idx_dep	403	const	2	100.00	Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE department ='Engineering' order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1004	David	Engineering	9000.00
SELECT * FROM employees WHERE department ='HRBP' order by id;
id	name	department	salary
EXPLAIN SELECT * FROM employees WHERE salary = 7000.00;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ref	idx_salary	idx_salary	6	const	1	100.00	Using secondary engine Rapid
SELECT * FROM employees WHERE salary = 7000.00;
id	name	department	salary
1003	Charlie	Sales	7000.00
EXPLAIN SELECT * FROM employees WHERE salary >= 7000.00 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	idx_salary	idx_salary	6	NULL	3	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE salary >= 7000.00 order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
EXPLAIN SELECT * FROM employees WHERE salary <= 7000.00 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	idx_salary	idx_salary	6	NULL	3	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE salary <= 7000.00 order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1003	Charlie	Sales	7000.00
1005	Eve	HR	6500.00
SELECT * FROM employees WHERE salary >= 3000.00 AND salary <= 7000.00 order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1003	Charlie	Sales	7000.00
1005	Eve	HR	6500.00
DROP TABLE employees;
CREATE TABLE ttt (
`score` double NOT NULL,
`name` char(10) ,
`id` int DEFAULT NULL,
`gender` char(1),
PRIMARY KEY (`score`)
) SECONDARY_ENGINE=rapid;
INSERT INTO ttt VALUES (1.1, 'n1',1, 'm'),(2.2, 'n2',2,'f'),(3.3,'n3',3,'s');
ALTER TABLE ttt SECONDARY_LOAD;
EXPLAIN SELECT * FROM ttt WHERE score < 2.3 AND id < 4 ORDER BY id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	ttt	NULL	range	PRIMARY	PRIMARY	8	NULL	2	33.33	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM ttt WHERE score < 2.3 AND id < 4 ORDER BY id;
score	name	id	gender
1.1	n1	1	m
2.2	n2	2	f
DROP TABLE ttt;
CREATE TABLE employees (
id INT PRIMARY KEY,
name VARCHAR(100),
department VARCHAR(100),
salary DECIMAL(10,2),
INDEX idx_dept_salary (department, salary)  -- COM INDEX(A, B)
) SECONDARY_ENGINE=RAPID;
INSERT INTO employees (id, name, department, salary) VALUES
(1001, 'Alice', 'HR', 6000.00),
(1002, 'Bob', 'Engineering', 8000.00),
(1003, 'Charlie', 'Sales', 7000.00),
(1004, 'David', 'Engineering', 9000.00),
(1005, 'Eve', 'HR', 6500.00);
ALTER TABLE employees SECONDARY_LOAD;
EXPLAIN SELECT * FROM employees WHERE id = 1002 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	Using secondary engine Rapid
SELECT * FROM employees WHERE id = 1002 order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
EXPLAIN SELECT * FROM employees WHERE id BETWEEN 1002 AND 1004 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	PRIMARY	PRIMARY	4	NULL	3	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE id BETWEEN 1002 AND 1004 order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1003	Charlie	Sales	7000.00
1004	David	Engineering	9000.00
EXPLAIN SELECT * FROM employees WHERE salary = 9000.00;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ALL	NULL	NULL	NULL	NULL	5	20.00	Using where; Using secondary engine Rapid
SELECT * FROM employees WHERE salary = 9000.00;
id	name	department	salary
1004	David	Engineering	9000.00
EXPLAIN SELECT * FROM employees WHERE department = 'HR' AND salary = 6500.00;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	ref	idx_dept_salary	idx_dept_salary	409	const,const	1	100.00	Using secondary engine Rapid
SELECT * FROM employees WHERE department = 'HR' AND salary = 6500.00;
id	name	department	salary
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE department = 'HR' AND salary >= 6000.00 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	idx_dept_salary	idx_dept_salary	409	NULL	2	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE department = 'HR' AND salary >= 6000.00 order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE department = 'HR' AND salary >= 6000.00 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	idx_dept_salary	idx_dept_salary	409	NULL	2	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE department = 'HR' AND salary <= 9000.00 order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE department <= 'HR' order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	idx_dept_salary	idx_dept_salary	403	NULL	4	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE department <= 'HR' order by id;
id	name	department	salary
1001	Alice	HR	6000.00
1005	Eve	HR	6500.00
EXPLAIN SELECT * FROM employees WHERE department <= 'HR' AND department >= 'Engineering' order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	range	idx_dept_salary	idx_dept_salary	403	NULL	4	100.00	Using where; Using filesort; Using secondary engine Rapid
SELECT * FROM employees WHERE department <= 'HR' AND department >= 'Engineering' order by id;
id	name	department	salary
1002	Bob	Engineering	8000.00
1004	David	Engineering	9000.00
[conn2]
insert into employees values(1006, 'PPT', 'Sales', 4530.32);
insert into employees values(1007, 'TPP', 'Sales', 5430.32);
[conn1]
explain select * from employees where id = 1006;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	employees	NULL	const	PRIMARY	PRIMARY	4	const	1	100.00	Using secondary engine Rapid
select * from employees where id = 1006;
id	name	department	salary
1006	PPT	Sales	4530.32
select * from employees where id = 1007;
id	name	department	salary
1007	TPP	Sales	5430.32
DROP TABLE employees;
CREATE TABLE test_composite_index2 (
`id` int NOT NULL,
`part1` double DEFAULT NULL,
`part2` double DEFAULT NULL,
`data` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL,
KEY `index1` (`part1`,`part2`)
) SECONDARY_ENGINE=rapid ;
INSERT INTO `test_composite_index2` (`id`, `part1`, `part2`, `data`) VALUES
(1, 10.5, 20.5, 'Data for 10.5, 20.5'),
(2, 10.5, 30.5, 'Data for 10.5, 30.5'),
(3, 10.5, 40.5, 'Data for 10.5, 40.5'),
(4, 20.5, 20.5, 'Data for 20.5, 20.5'),
(5, 20.5, 30.5, 'Data for 20.5, 30.5'),
(6, 30.5, 10.5, 'Data for 30.5, 10.5'),
(7, 30.5, 20.5, 'Data for 30.5, 20.5'),
(8, 40.5, 40.5, 'Data for 40.5, 40.5'),
(9, 41.4, 41.2, 'Data for 41.4, 41.2'),
(10, 41.4, 41.2, 'Data for 41.4, 41.2'),
(11, 41.4, 41.2, 'Data for 41.4, 41.2'),
(12, 41.4, 41.2, 'Data for 41.4, 41.2'),
(13, 41.4, 41.2, 'Data for 41.4, 41.2'),
(14, 40.4, 41.2, 'Data for 40.4, 41.2'),
(15, 40.4, 41.2, 'Data for 40.4, 41.2'),
(16, 40.4, 41.2, 'Data for 40.4, 41.2'),
(17, 40.4, 41.2, 'Data for 40.4, 41.2'),
(18, 40.4, 41.2, 'Data for 40.4, 41.2'),
(19, 40.4, 41.2, 'Data for 40.4, 41.2'),
(20, 40.4, 41.2, 'Data for 40.4, 41.2'),
(21, 40.4, 41.2, 'Data for 40.4, 41.2'),
(22, 40.4, 41.2, 'Data for 40.4, 41.2');
ALTER TABLE test_composite_index2 SECONDARY_LOAD;
explain select * from test_composite_index2 where part1 =40.4 and part2=41.2 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ref	index1	index1	18	const,const	9	100.00	Using filesort; Using secondary engine Rapid
select * from test_composite_index2 where part1 =40.4 and part2=41.2 order by id;
id	part1	part2	data
14	40.4	41.2	Data for 40.4, 41.2
15	40.4	41.2	Data for 40.4, 41.2
16	40.4	41.2	Data for 40.4, 41.2
17	40.4	41.2	Data for 40.4, 41.2
18	40.4	41.2	Data for 40.4, 41.2
19	40.4	41.2	Data for 40.4, 41.2
20	40.4	41.2	Data for 40.4, 41.2
21	40.4	41.2	Data for 40.4, 41.2
22	40.4	41.2	Data for 40.4, 41.2
explain select * from test_composite_index2 where part1 > 40.4 and part2=41.2 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	range	index1	index1	9	NULL	6	10.00	Using where; Using filesort; Using secondary engine Rapid
select * from test_composite_index2 where part1 > 40.4 and part2=41.2 order by id;
id	part1	part2	data
9	41.4	41.2	Data for 41.4, 41.2
10	41.4	41.2	Data for 41.4, 41.2
11	41.4	41.2	Data for 41.4, 41.2
12	41.4	41.2	Data for 41.4, 41.2
13	41.4	41.2	Data for 41.4, 41.2
explain select * from test_composite_index2 where id = 10;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ALL	NULL	NULL	NULL	NULL	22	10.00	Using where; Using secondary engine Rapid
select * from test_composite_index2 where id = 10;
id	part1	part2	data
10	41.4	41.2	Data for 41.4, 41.2
explain select * from test_composite_index2 where id > 10 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ALL	NULL	NULL	NULL	NULL	22	33.33	Using where; Using filesort; Using secondary engine Rapid
select * from test_composite_index2 where id > 10 order by id;
id	part1	part2	data
11	41.4	41.2	Data for 41.4, 41.2
12	41.4	41.2	Data for 41.4, 41.2
13	41.4	41.2	Data for 41.4, 41.2
14	40.4	41.2	Data for 40.4, 41.2
15	40.4	41.2	Data for 40.4, 41.2
16	40.4	41.2	Data for 40.4, 41.2
17	40.4	41.2	Data for 40.4, 41.2
18	40.4	41.2	Data for 40.4, 41.2
19	40.4	41.2	Data for 40.4, 41.2
20	40.4	41.2	Data for 40.4, 41.2
21	40.4	41.2	Data for 40.4, 41.2
22	40.4	41.2	Data for 40.4, 41.2
explain select * from test_composite_index2 where id >= 10 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ALL	NULL	NULL	NULL	NULL	22	33.33	Using where; Using filesort; Using secondary engine Rapid
select * from test_composite_index2 where id >= 10 order by id;
id	part1	part2	data
10	41.4	41.2	Data for 41.4, 41.2
11	41.4	41.2	Data for 41.4, 41.2
12	41.4	41.2	Data for 41.4, 41.2
13	41.4	41.2	Data for 41.4, 41.2
14	40.4	41.2	Data for 40.4, 41.2
15	40.4	41.2	Data for 40.4, 41.2
16	40.4	41.2	Data for 40.4, 41.2
17	40.4	41.2	Data for 40.4, 41.2
18	40.4	41.2	Data for 40.4, 41.2
19	40.4	41.2	Data for 40.4, 41.2
20	40.4	41.2	Data for 40.4, 41.2
21	40.4	41.2	Data for 40.4, 41.2
22	40.4	41.2	Data for 40.4, 41.2
explain select * from test_composite_index2 where id < 10 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ALL	NULL	NULL	NULL	NULL	22	33.33	Using where; Using filesort; Using secondary engine Rapid
select * from test_composite_index2 where id < 10 order by id;
id	part1	part2	data
1	10.5	20.5	Data for 10.5, 20.5
2	10.5	30.5	Data for 10.5, 30.5
3	10.5	40.5	Data for 10.5, 40.5
4	20.5	20.5	Data for 20.5, 20.5
5	20.5	30.5	Data for 20.5, 30.5
6	30.5	10.5	Data for 30.5, 10.5
7	30.5	20.5	Data for 30.5, 20.5
8	40.5	40.5	Data for 40.5, 40.5
9	41.4	41.2	Data for 41.4, 41.2
explain select * from test_composite_index2 where id <= 10;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ALL	NULL	NULL	NULL	NULL	22	33.33	Using where; Using secondary engine Rapid
select * from test_composite_index2 where id <= 10;
id	part1	part2	data
1	10.5	20.5	Data for 10.5, 20.5
2	10.5	30.5	Data for 10.5, 30.5
3	10.5	40.5	Data for 10.5, 40.5
4	20.5	20.5	Data for 20.5, 20.5
5	20.5	30.5	Data for 20.5, 30.5
6	30.5	10.5	Data for 30.5, 10.5
7	30.5	20.5	Data for 30.5, 20.5
8	40.5	40.5	Data for 40.5, 40.5
9	41.4	41.2	Data for 41.4, 41.2
10	41.4	41.2	Data for 41.4, 41.2
explain select * from test_composite_index2 where id >= 3 and id <= 10 order by id;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	test_composite_index2	NULL	ALL	NULL	NULL	NULL	NULL	22	11.11	Using where; Using filesort; Using secondary engine Rapid
select * from test_composite_index2 where id >= 3 and id <= 10 order by id;
id	part1	part2	data
3	10.5	40.5	Data for 10.5, 40.5
4	20.5	20.5	Data for 20.5, 20.5
5	20.5	30.5	Data for 20.5, 30.5
6	30.5	10.5	Data for 30.5, 10.5
7	30.5	20.5	Data for 30.5, 20.5
8	40.5	40.5	Data for 40.5, 40.5
9	41.4	41.2	Data for 41.4, 41.2
10	41.4	41.2	Data for 41.4, 41.2
DROP TABLE test_composite_index2;
DROP DATABASE sh_index;

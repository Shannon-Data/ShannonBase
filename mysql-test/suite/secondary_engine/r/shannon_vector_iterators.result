create database sh_vector_iterators;
use sh_vector_iterators;
CREATE TABLE customers (
customer_id INT PRIMARY KEY AUTO_INCREMENT,
customer_name VARCHAR(100),
email VARCHAR(100),
registration_date DATE,
country VARCHAR(50),
credit_score INT
) SECONDARY_ENGINE=rapid;
CREATE TABLE orders (
order_id INT PRIMARY KEY AUTO_INCREMENT,
customer_id INT,
order_date DATE,
total_amount DECIMAL(10,2),
product_category VARCHAR(50),
quantity INT,
FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
) SECONDARY_ENGINE=rapid;
SELECT COUNT(*) FROM customers;
COUNT(*)
1000
SELECT COUNT(*) FROM orders;
COUNT(*)
2500
############### GETS THE RESULT FROM INNODB ###########################
SELECT 
c.country,
COUNT(DISTINCT c.customer_id) as customer_count,
COUNT(o.order_id) as total_orders,
SUM(o.quantity) as total_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.country
ORDER BY total_orders DESC;
country	customer_count	total_orders	total_quantity
Australia	23	402	2182
USA	23	393	2233
India	19	315	1736
Canada	15	262	1469
France	14	230	1176
China	13	215	1122
UK	11	191	1052
Germany	10	171	917
Brazil	11	163	845
Japan	11	158	895
############### GETS THE RESULT FROM RAPID VIA VECTORIZED  EXECUTION ###########################
SET USE_SECONDARY_ENGINE=ON;
SET secondary_engine_cost_threshold=10;
SET rapid_use_dynamic_offload=off;
ALTER TABLE customers SECONDARY_LOAD;
ALTER TABLE orders SECONDARY_LOAD;
############### No.1 Testing Vectorized Count ###########################
explain format=tree SELECT 
c.country,
COUNT(DISTINCT c.customer_id) as customer_count,
COUNT(o.order_id) as total_orders,
SUM(o.quantity) as total_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.country
ORDER BY total_orders DESC;
EXPLAIN
-> Sort: total_orders DESC
    -> Stream results
        -> Group aggregate: count(distinct customers.customer_id), count(orders.order_id), sum(orders.quantity)
            -> Sort: c.country
                -> Stream results  (cost=X rows=X)
                    -> Nested loop inner join  (cost=X rows=X)
                        -> Filter: (o.customer_id is not null)  (cost=X rows=X)
                            -> Table scan on o  (cost=X rows=X)
                        -> Single-row index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=X rows=X)

SELECT 
c.country,
COUNT(DISTINCT c.customer_id) as customer_count,
COUNT(o.order_id) as total_orders,
SUM(o.quantity) as total_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.country
ORDER BY total_orders DESC;
country	customer_count	total_orders	total_quantity
Australia	23	402	2182
USA	23	393	2233
India	19	315	1736
Canada	15	262	1469
France	14	230	1176
China	13	215	1122
UK	11	191	1052
Germany	10	171	917
Brazil	11	163	845
Japan	11	158	895
SET USE_SECONDARY_ENGINE=ON;
SET secondary_engine_cost_threshold=0;
SET rapid_use_dynamic_offload=off;
SELECT 
c.country,
COUNT(DISTINCT c.customer_id) as customer_count,
COUNT(o.order_id) as total_orders,
SUM(o.quantity) as total_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.country
ORDER BY total_orders DESC;
country	customer_count	total_orders	total_quantity
Australia	23	402	2182
USA	23	393	2233
India	19	315	1736
Canada	15	262	1469
France	14	230	1176
China	13	215	1122
UK	11	191	1052
Germany	10	171	917
Brazil	11	163	845
Japan	11	158	895
DROP DATABASE sh_vector_iterators;

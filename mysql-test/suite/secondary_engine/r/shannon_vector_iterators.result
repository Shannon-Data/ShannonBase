create database sh_vector_iterators;
use sh_vector_iterators;
DROP TABLE IF EXISTS t_innodb;
CREATE TABLE t_innodb (
id  INT NOT NULL,
val INT,
PRIMARY KEY (id)
) ENGINE=InnoDB SECONDARY_ENGINE=RAPID;
DROP TABLE IF EXISTS t_rapid;
CREATE TABLE t_rapid (
id  INT NOT NULL,
val INT
) ENGINE=InnoDB
SECONDARY_ENGINE=RAPID;
INSERT INTO t_innodb VALUES
(1,10),(2,20),(3,30),(4,40),(5,50);
INSERT INTO t_rapid VALUES
(1,100),(2,200),(3,300),(4,400),(5,500),
(6,600),(7,700),(8,800),(9,900),(10,1000);
SET USE_SECONDARY_ENGINE = OFF;
EXPLAIN FORMAT=TREE
SELECT t_innodb.id, t_innodb.val, t_rapid.val
FROM t_innodb
JOIN t_rapid
ON t_innodb.id = t_rapid.id
ORDER BY t_innodb.id;
EXPLAIN
-> Sort: t_innodb.id
    -> Stream results  (cost=X rows=X)
        -> Inner hash join (t_rapid.id = t_innodb.id)  (cost=X rows=X)
            -> Table scan on t_rapid  (cost=X rows=X)
            -> Hash
                -> Table scan on t_innodb  (cost=X rows=X)

SELECT t_innodb.id, t_innodb.val, t_rapid.val 
FROM t_innodb 
JOIN t_rapid   
ON t_innodb.id = t_rapid.id 
ORDER BY t_innodb.id;
id	val	val
1	10	100
2	20	200
3	30	300
4	40	400
5	50	500
ALTER TABLE t_innodb SECONDARY_LOAD;
ALTER TABLE t_rapid SECONDARY_LOAD;
SET USE_SECONDARY_ENGINE = ON;
SET rapid_use_dynamic_offload=off;
SET secondary_engine_cost_threshold=10;
SELECT t_innodb.id, t_innodb.val, t_rapid.val 
FROM t_innodb 
JOIN t_rapid   
ON t_innodb.id = t_rapid.id 
ORDER BY t_innodb.id;
id	val	val
1	10	100
2	20	200
3	30	300
4	40	400
5	50	500
DROP DATABASE sh_vector_iterators;

# Tests for the SECONDARY_ENGINE table option.
# Most DDLs are allowed on tables with SECONDARY_ENGINE when
# the corresponding SECONDARY_ENGINE plugin is not installed.
# Following tests are with SECONDARY_ENGINE plugin that doesn't exist.

create database sh_vector_iterators;
use sh_vector_iterators;
--disable_warnings

CREATE TABLE customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    registration_date DATE,
    country VARCHAR(50),
    credit_score INT
) SECONDARY_ENGINE=rapid;

CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    product_category VARCHAR(50),
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
) SECONDARY_ENGINE=rapid;

# Insert test data using stored procedures
--disable_query_log
--eval LOAD DATA INFILE '$MYSQLTEST_VARDIR/std_data/vectorized_iterator/customers_data.csv' INTO TABLE customers FIELDS TERMINATED BY ',' ;
--eval LOAD DATA INFILE '$MYSQLTEST_VARDIR/std_data/vectorized_iterator/orders_data.csv' INTO TABLE orders FIELDS TERMINATED BY ',' ;
--enable_query_log

SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM orders;
############### GETS THE RESULT FROM INNODB ###########################
--echo ############### GETS THE RESULT FROM INNODB ###########################
SELECT 
    c.country,
    COUNT(DISTINCT c.customer_id) as customer_count,
    COUNT(o.order_id) as total_orders,
    SUM(o.quantity) as total_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.country
ORDER BY total_orders DESC;

############### GETS THE RESULT FROM RAPID VIA VECTORIZED  EXECUTION ###########################
--echo ############### GETS THE RESULT FROM RAPID VIA VECTORIZED  EXECUTION ###########################
SET USE_SECONDARY_ENGINE=ON;
SET secondary_engine_cost_threshold=10;
SET rapid_use_dynamic_offload=off;

ALTER TABLE customers SECONDARY_LOAD;
ALTER TABLE orders SECONDARY_LOAD;

--echo ############### No.1 Testing Vectorized Count ###########################
--replace_regex /\(cost=[0-9.]+/\(cost=X/ /rows=[0-9]+/rows=X/ /\(rows=[0-9]+\)/\(rows=X\)/
explain format=tree SELECT 
    c.country,
    COUNT(DISTINCT c.customer_id),
    COUNT(o.order_id) as total_orders,
    sum(c.customer_id),
    sum(o.order_id),
    sum(o.total_amount)
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id  
GROUP BY c.country
ORDER BY total_orders DESC;

SELECT 
    c.country,
    COUNT(DISTINCT c.customer_id),
    COUNT(o.order_id) as total_orders,
    sum(c.customer_id),
    sum(o.order_id),
    sum(o.total_amount)
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id  
GROUP BY c.country
ORDER BY total_orders DESC;

SET USE_SECONDARY_ENGINE=ON;
SET secondary_engine_cost_threshold=0;
SET rapid_use_dynamic_offload=off;

#--replace_regex /\(cost=[0-9.]+/\(cost=X/ /rows=[0-9]+/rows=X/ /\(rows=[0-9]+\)/\(rows=X\)/
#explain SELECT 
#    c.country,
#    COUNT(DISTINCT c.customer_id) as customer_count,
#    COUNT(o.order_id) as total_orders,
#    SUM(o.quantity) as total_quantity
#FROM customers c
#JOIN orders o ON c.customer_id = o.customer_id
#GROUP BY c.country
#ORDER BY total_orders DESC;

SELECT 
    c.country,
    COUNT(DISTINCT c.customer_id),
    COUNT(o.order_id) as total_orders,
    sum(c.customer_id),
    sum(o.order_id),
    sum(o.total_amount)
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id  
GROUP BY c.country
ORDER BY total_orders DESC;

--enable_warnings
DROP DATABASE sh_vector_iterators;

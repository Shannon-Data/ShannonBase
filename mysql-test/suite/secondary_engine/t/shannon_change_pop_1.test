##############################################################################
# ShannonBase test case for query data.
# ShannonBase copyright 2023-
##############################################################################

# Tests for the SECONDARY_ENGINE rapid changs pop functions.

create database test_query;
use test_query;
--disable_warnings

create table tt2 (name char(10), gender char(1)) secondary_engine=rapid;
insert into tt2 values('n1', 'm'), ('n2', null), ('n3', 'm');
select * from tt2;

--echo #connection_1, cconnection_2 and cconnection_3
--connect(connection_1,localhost,root,,test_query)
--connect(connection_2,localhost,root,,test_query)
--connect(connection_3,localhost,root,,test_query)

--connection connection_1
--echo [conn1]
set use_secondary_engine=forced;
alter table tt2 secondary_load;
explain select * from tt2;
select * from tt2;

--connection connection_2
--echo [conn2]
begin;
select @@use_secondary_engine;

--connection connection_3
--echo [conn3]
begin;
select @@use_secondary_engine;

--connection connection_3
--echo [conn3]
explain select * from tt2;
select * from tt2;

--connection connection_2
--echo [conn2]
delete from tt2;
explain select * from tt2;
select * from tt2;

--connection connection_1
--echo [conn1]
--sleep 18
explain select * from tt2;
select * from tt2;

--connection connection_3
--echo [conn3]
explain select * from tt2;
select * from tt2;

--connection connection_2
--echo [conn2]
commit;

--connection connection_3
--echo [conn3]
commit;

#for large field.
--connection connection_1
--echo [conn1]
#name is large than a page.
create table tt (score int , name text, id int, gender char(1)) secondary_engine=rapid;
insert into tt values(1, 'n1', 1, 'm'), (2, 'n2', 2, 'f'), (3, 'n3', 3, 'm');
insert into tt values (4,'If the speed of processing data propagation from the MySQL DB System to HeatWave is too slow and the change propagation buffer exceeds its size, this would result in a few potential behaviors or challenges:

Buffer Overflow Handling:
If the propagation buffer exceeds its 64MB size before it can be processed, the buffer would typically flush the accumulated data to HeatWave. However, if the data propagation is too slow to handle the incoming data at this rate, it could lead to delays in propagating changes to HeatWave. In a well-designed system, there may be mechanisms to throttle incoming operations or optimize the process to avoid overwhelming the system.

Query Handling and Offloading:
Since queries accessing tables with stale data are not offloaded to HeatWave, if change propagation is slow or delayed, the affected tables may be considered stale. This would prevent queries from being offloaded to the HeatWave cluster, and they would instead be processed directly by InnoDB. This ensures consistency, but the performance benefits of HeatWave might be lost until the propagation catches up.

Stale Table Reload:
If change propagation fails or is too slow, tables may become stale. MySQL will detect these stale tables and initiate an automatic reload. This could happen periodically during idle times in the HeatWave Cluster or when the system detects issues with change propagation.

Throttling of DML Operations:
In extreme cases where the change propagation buffer frequently exceeds its capacity due to slow processing, the system might implement throttling or backpressure on DML operations in the MySQL DB System. This could limit the rate at which changes are written to the buffer to prevent overload, though this would typically be a last resort to maintain stability.
After tables are loaded into HeatWave, data changes are automatically propagated from InnoDB tables on
the MySQL DB System to their counterpart tables in the HeatWave Cluster.
DML operations, INSERT, UPDATE, and DELETE, on the MySQL DB System do not wait for changes to be
propagated to the HeatWave Cluster; that is, DML operations on the MySQL DB System are not delayed
by HeatWave change propagation.
Data changes on the MySQL DB System node are propagated to HeatWave in batch transactions. Change
propagation is initiated as follows:
• Every 200ms.
• When the change propagation buffer reaches its 64MB capacity.
• When data updated by DML operations on the MySQL DB System are read by a subsequent HeatWave
query.
A change propagation failure can cause tables in HeatWave to become stale, and queries that access
stale tables are not offloaded to HeatWave for processing.
Tables that have become stale due to change propagation failures resulting from out-of-code errors are automatically reloaded. A check for stale tables is performed periodically when the HeatWave Cluster is idle. how about if the speed of processing population is too slow, the buffer of change population will exceed over its size 
If the speed of processing data propagation from the MySQL DB System to HeatWave is too slow and the change propagation buffer exceeds its size, this would result in a few potential behaviors or challenges:

Buffer Overflow Handling:
If the propagation buffer exceeds its 64MB size before it can be processed, the buffer would typically flush the accumulated data to HeatWave. However, if the data propagation is too slow to handle the incoming data at this rate, it could lead to delays in propagating changes to HeatWave. In a well-designed system, there may be mechanisms to throttle incoming operations or optimize the process to avoid overwhelming the system.

Query Handling and Offloading:
Since queries accessing tables with stale data are not offloaded to HeatWave, if change propagation is slow or delayed, the affected tables may be considered stale. This would prevent queries from being offloaded to the HeatWave cluster, and they would instead be processed directly by InnoDB. This ensures consistency, but the performance benefits of HeatWave might be lost until the propagation catches up.

Stale Table Reload:
If change propagation fails or is too slow, tables may become stale. MySQL will detect these stale tables and initiate an automatic reload. This could happen periodically during idle times in the HeatWave Cluster or when the system detects issues with change propagation.

Throttling of DML Operations:
In extreme cases where the change propagation buffer frequently exceeds its capacity due to slow processing, the system might implement throttling or backpressure on DML operations in the MySQL DB System. This could limit the rate at which changes are written to the buffer to prevent overload, though this would typically be a last resort to maintain stability.
After tables are loaded into HeatWave, data changes are automatically propagated from InnoDB tables on
the MySQL DB System to their counterpart tables in the HeatWave Cluster.
DML operations, INSERT, UPDATE, and DELETE, on the MySQL DB System do not wait for changes to be
propagated to the HeatWave Cluster; that is, DML operations on the MySQL DB System are not delayed
by HeatWave change propagation.
Data changes on the MySQL DB System node are propagated to HeatWave in batch transactions. Change
propagation is initiated as follows:
• Every 200ms.
• When the change propagation buffer reaches its 64MB capacity.
• When data updated by DML operations on the MySQL DB System are read by a subsequent HeatWave
query.
A change propagation failure can cause tables in HeatWave to become stale, and queries that access
stale tables are not offloaded to HeatWave for processing.
Tables that have become stale due to change propagation failures resulting from out-of-code errors are automatically reloaded. A check for stale tables is performed periodically when the HeatWave Cluster is idle. how about if the speed of processing population is too slow, the buffer of change population will exceed over its size 
If the speed of processing data propagation from the MySQL DB System to HeatWave is too slow and the change propagation buffer exceeds its size, this would result in a few potential behaviors or challenges:

Buffer Overflow Handling:
If the propagation buffer exceeds its 64MB size before it can be processed, the buffer would typically flush the accumulated data to HeatWave. However, if the data propagation is too slow to handle the incoming data at this rate, it could lead to delays in propagating changes to HeatWave. In a well-designed system, there may be mechanisms to throttle incoming operations or optimize the process to avoid overwhelming the system.

Query Handling and Offloading:
Since queries accessing tables with stale data are not offloaded to HeatWave, if change propagation is slow or delayed, the affected tables may be considered stale. This would prevent queries from being offloaded to the HeatWave cluster, and they would instead be processed directly by InnoDB. This ensures consistency, but the performance benefits of HeatWave might be lost until the propagation catches up.

Stale Table Reload:
If change propagation fails or is too slow, tables may become stale. MySQL will detect these stale tables and initiate an automatic reload. This could happen periodically during idle times in the HeatWave Cluster or when the system detects issues with change propagation.

Throttling of DML Operations:
In extreme cases where the change propagation buffer frequently exceeds its capacity due to slow processing, the system might implement throttling or backpressure on DML operations in the MySQL DB System. This could limit the rate at which changes are written to the buffer to prevent overload, though this would typically be a last resort to maintain stability.
After tables are loaded into HeatWave, data changes are automatically propagated from InnoDB tables on
the MySQL DB System to their counterpart tables in the HeatWave Cluster.
DML operations, INSERT, UPDATE, and DELETE, on the MySQL DB System do not wait for changes to be
propagated to the HeatWave Cluster; that is, DML operations on the MySQL DB System are not delayed
by HeatWave change propagation.
Data changes on the MySQL DB System node are propagated to HeatWave in batch transactions. Change
propagation is initiated as follows:
• Every 200ms.
• When the change propagation buffer reaches its 64MB capacity.
• When data updated by DML operations on the MySQL DB System are read by a subsequent HeatWave
query.
A change propagation failure can cause tables in HeatWave to become stale, and queries that access
stale tables are not offloaded to HeatWave for processing.
Tables that have become stale due to change propagation failures resulting from out-of-code errors are automatically reloaded. A check for stale tables is performed periodically when the HeatWave Cluster is idle. how about if the speed of processing population is too slow, the buffer of change population will exceed over its size 
If the speed of processing data propagation from the MySQL DB System to HeatWave is too slow and the change propagation buffer exceeds its size, this would result in a few potential behaviors or challenges:

Buffer Overflow Handling:
If the propagation buffer exceeds its 64MB size before it can be processed, the buffer would typically flush the accumulated data to HeatWave. However, if the data propagation is too slow to handle the incoming data at this rate, it could lead to delays in propagating changes to HeatWave. In a well-designed system, there may be mechanisms to throttle incoming operations or optimize the process to avoid overwhelming the system.

Query Handling and Offloading:
Since queries accessing tables with stale data are not offloaded to HeatWave, if change propagation is slow or delayed, the affected tables may be considered stale. This would prevent queries from being offloaded to the HeatWave cluster, and they would instead be processed directly by InnoDB. This ensures consistency, but the performance benefits of HeatWave might be lost until the propagation catches up.

Stale Table Reload:
If change propagation fails or is too slow, tables may become stale. MySQL will detect these stale tables and initiate an automatic reload. This could happen periodically during idle times in the HeatWave Cluster or when the system detects issues with change propagation.

Throttling of DML Operations:
In extreme cases where the change propagation buffer frequently exceeds its capacity due to slow processing, the system might implement throttling or backpressure on DML operations in the MySQL DB System. This could limit the rate at which changes are written to the buffer to prevent overload, though this would typically be a last resort to maintain stability.
After tables are loaded into HeatWave, data changes are automatically propagated from InnoDB tables on
the MySQL DB System to their counterpart tables in the HeatWave Cluster.
DML operations, INSERT, UPDATE, and DELETE, on the MySQL DB System do not wait for changes to be
propagated to the HeatWave Cluster; that is, DML operations on the MySQL DB System are not delayed
by HeatWave change propagation.
Data changes on the MySQL DB System node are propagated to HeatWave in batch transactions. Change
propagation is initiated as follows:
• Every 200ms.
• When the change propagation buffer reaches its 64MB capacity.
• When data updated by DML operations on the MySQL DB System are read by a subsequent HeatWave
query.
A change propagation failure can cause tables in HeatWave to become stale, and queries that access
stale tables are not offloaded to HeatWave for processing.
Tables that have become stale due to change propagation failures resulting from out-of-code errors are automatically reloaded. A check for stale tables is performed periodically when the HeatWave Cluster is idle. how about if the speed of processing population is too slow, the buffer of change population will exceed over its size 
If the speed of processing data propagation from the MySQL DB System to HeatWave is too slow and the change propagation buffer exceeds its size, this would result in a few potential behaviors or challenges:

Buffer Overflow Handling:
If the propagation buffer exceeds its 64MB size before it can be processed, the buffer would typically flush the accumulated data to HeatWave. However, if the data propagation is too slow to handle the incoming data at this rate, it could lead to delays in propagating changes to HeatWave. In a well-designed system, there may be mechanisms to throttle incoming operations or optimize the process to avoid overwhelming the system.

Query Handling and Offloading:
Since queries accessing tables with stale data are not offloaded to HeatWave, if change propagation is slow or delayed, the affected tables may be considered stale. This would prevent queries from being offloaded to the HeatWave cluster, and they would instead be processed directly by InnoDB. This ensures consistency, but the performance benefits of HeatWave might be lost until the propagation catches up.

Stale Table Reload:
If change propagation fails or is too slow, tables may become stale. MySQL will detect these stale tables and initiate an automatic reload. This could happen periodically during idle times in the HeatWave Cluster or when the system detects issues with change propagation.

Throttling of DML Operations:
In extreme cases where the change propagation buffer frequently exceeds its capacity due to slow processing, the system might implement throttling or backpressure on DML operations in the MySQL DB System. This could limit the rate at which changes are written to the buffer to prevent overload, though this would typically be a last resort to maintain stability.
After tables are loaded into HeatWave, data changes are automatically propagated from InnoDB tables on
the MySQL DB System to their counterpart tables in the HeatWave Cluster.
DML operations, INSERT, UPDATE, and DELETE, on the MySQL DB System do not wait for changes to be
propagated to the HeatWave Cluster; that is, DML operations on the MySQL DB System are not delayed
by HeatWave change propagation.
Data changes on the MySQL DB System node are propagated to HeatWave in batch transactions. Change
propagation is initiated as follows:
• Every 200ms.
• When the change propagation buffer reaches its 64MB capacity.
• When data updated by DML operations on the MySQL DB System are read by a subsequent HeatWave
query.
A change propagation failure can cause tables in HeatWave to become stale, and queries that access
stale tables are not offloaded to HeatWave for processing.
Tables that have become stale due to change propagation failures resulting from out-of-code errors are automatically reloaded. A check for stale tables is performed periodically when the HeatWave Cluster is idle. how about if the speed of processing population is too slow, the buffer of change population will exceed over its size 
If the speed of processing data propagation from the MySQL DB System to HeatWave is too slow and the change propagation buffer exceeds its size, this would result in a few potential behaviors or challenges:

Buffer Overflow Handling:
If the propagation buffer exceeds its 64MB size before it can be processed, the buffer would typically flush the accumulated data to HeatWave. However, if the data propagation is too slow to handle the incoming data at this rate, it could lead to delays in propagating changes to HeatWave. In a well-designed system, there may be mechanisms to throttle incoming operations or optimize the process to avoid overwhelming the system.

Query Handling and Offloading:
Since queries accessing tables with stale data are not offloaded to HeatWave, if change propagation is slow or delayed, the affected tables may be considered stale. This would prevent queries from being offloaded to the HeatWave cluster, and they would instead be processed directly by InnoDB. This ensures consistency, but the performance benefits of HeatWave might be lost until the propagation catches up.

Stale Table Reload:
If change propagation fails or is too slow, tables may become stale. MySQL will detect these stale tables and initiate an automatic reload. This could happen periodically during idle times in the HeatWave Cluster or when the system detects issues with change propagation.

Throttling of DML Operations:
In extreme cases where the change propagation buffer frequently exceeds its capacity due to slow processing, the system might implement throttling or backpressure on DML operations in the MySQL DB System. This could limit the rate at which changes are written to the buffer to prevent overload, though this would typically be a last resort to maintain stability.
After tables are loaded into HeatWave, data changes are automatically propagated from InnoDB tables on
the MySQL DB System to their counterpart tables in the HeatWave Cluster.
DML operations, INSERT, UPDATE, and DELETE, on the MySQL DB System do not wait for changes to be
propagated to the HeatWave Cluster; that is, DML operations on the MySQL DB System are not delayed
by HeatWave change propagation.
Data changes on the MySQL DB System node are propagated to HeatWave in batch transactions. Change
propagation is initiated as follows:
• Every 200ms.
• When the change propagation buffer reaches its 64MB capacity.
• When data updated by DML operations on the MySQL DB System are read by a subsequent HeatWave
query.
A change propagation failure can cause tables in HeatWave to become stale, and queries that access
stale tables are not offloaded to HeatWave for processing.
Tables that have become stale due to change propagation failures resulting from out-of-code errors are automatically reloaded. A check for stale tables is performed periodically when the HeatWave Cluster is idle. how about if the speed of processing population is too slow, the buffer of change population will exceed over its size ', 4, 'f');

set use_secondary_engine = forced;
alter table tt secondary_load;

explain select *, length(name) from tt;
select *, length(name) from tt;

--connection default
--enable_warnings
drop table tt;
drop table tt2;
drop database test_query;
disconnect connection_3;
disconnect connection_2;
disconnect connection_1;

